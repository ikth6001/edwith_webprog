/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ikth.apps.reservation.controller;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.ikth.apps.reservation.dto.CategoryResponse;
import com.ikth.apps.reservation.dto.CommentResponse;
import com.ikth.apps.reservation.dto.DisplayInfoResponse;
import com.ikth.apps.reservation.dto.ProductResponse;
import com.ikth.apps.reservation.dto.ReservationInfoResponse;
import com.ikth.apps.reservation.dto.ReservationParam;
import com.ikth.apps.reservation.dto.ReservationResponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-05T12:37:37.915+09:00")
@Api(value = "api", description = "the api API")
public interface ReservationRestController {

    @ApiOperation(value = "예약취소하기", nickname = "cancelReservationUsingPUT", notes = "[PJT-5] 예약취소하기는 실제 DB 에 적용된 값이 아닌, Random 으로 생성된 예약 객체를 반환한다.", response = ReservationResponse.class, tags={ "예약 API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReservationResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/reservations/{reservationId}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ReservationResponse> cancelReservationUsingPUT(@ApiParam(value = "reservationId",required=true) @PathVariable("reservationId") Integer reservationId);


    @ApiOperation(value = "한줄평 (Comment) 등록", nickname = "createReservationCommentUsingPOST", notes = "[PJT-6] 한중평 등록은 실제 DB 에 적용된 값이 아닌, Random 으로 생성된 Comment 객체를 반환한다.", response = CommentResponse.class, tags={ "예약 API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CommentResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/reservations/{reservationInfoId}/comments",
        produces = { "*/*" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<CommentResponse> createReservationCommentUsingPOST(@NotNull @ApiParam(value = "comment", required = true) @Valid @RequestParam(value = "comment", required = true) String comment,@NotNull @ApiParam(value = "productId", required = true) @Valid @RequestParam(value = "productId", required = true) Integer productId,@ApiParam(value = "reservationInfoId",required=true) @PathVariable("reservationInfoId") Integer reservationInfoId,@NotNull @ApiParam(value = "score", required = true) @Valid @RequestParam(value = "score", required = true) Integer score,@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile attachedImage);


    @ApiOperation(value = "카테고리 목록 구하기", nickname = "getCategoriesUsingGET", notes = "[PJT-3]", response = CategoryResponse.class, tags={ "카테고리 API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CategoryResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/categories",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CategoryResponse> getCategoriesUsingGET();


    @ApiOperation(value = "상품 전시 정보 구하기", nickname = "getProductDisplayInfoUsingGET", notes = "[PJT-4 & 6] PJT 4 에서 개발과 테스트를 완료 (한줄평 등록 없는 상태), PJT 6 에서 한줄평 등록한 내용까지 잘 나오나 테스트", response = DisplayInfoResponse.class, tags={ "상품 API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DisplayInfoResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/products/{displayInfoId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<DisplayInfoResponse> getProductDisplayInfoUsingGET(@ApiParam(value = "displayInfoId",required=true) @PathVariable("displayInfoId") Integer displayInfoId);


    @ApiOperation(value = "상품 목록 구하기", nickname = "getProductsUsingGET", notes = "[PJT-3]", response = ProductResponse.class, tags={ "상품 API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductResponse> getProductsUsingGET(@ApiParam(value = "카테고리 아이디") @Valid @RequestParam(value = "categoryId", required = false) Integer categoryId,@ApiParam(value = "시작 위치", defaultValue = "0") @Valid @RequestParam(value = "start", required = false, defaultValue="0") Integer start);


    @ApiOperation(value = "프로모션 목록 구하기", nickname = "getPromotionsUsingGET", notes = "[PJT-3]", response = ProductResponse.class, tags={ "프로모션 API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/promotions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductResponse> getPromotionsUsingGET();


    @ApiOperation(value = "예약정보 조회", nickname = "getReservationsUsingGET", notes = "[PJT-5]", response = ReservationInfoResponse.class, tags={ "예약 API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReservationInfoResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/reservations",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ReservationInfoResponse> getReservationsUsingGET(@NotNull @ApiParam(value = "reservationEmail", required = true) @Valid @RequestParam(value = "reservationEmail", required = true) String reservationEmail);


    @ApiOperation(value = "예약하기", nickname = "reserveProductUsingPOST", notes = "[PJT-5] 예약하기는 실제 DB 에 적용된 값이 아닌, Random 으로 생성된 예약 객체를 반환한다.", response = ReservationResponse.class, tags={ "예약 API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReservationResponse.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/reservations",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ReservationResponse> reserveProductUsingPOST(@ApiParam(value = "reservationParam" ,required=true )  @Valid @RequestBody ReservationParam reservationParam);

}
